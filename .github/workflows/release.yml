name: Release and Publish

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Build
        run: npm run build

  release:
    name: Release and Publish
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release

      - name: Update server.json version
        if: success()
        run: |
          # Get the new version from package.json
          NEW_VERSION=$(node -p "require('./package.json').version")
          # Update server.json with the new version
          sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"$NEW_VERSION\"/g" server.json
          
          # Check if there are changes to commit
          if [[ -n $(git status --porcelain server.json) ]]; then
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add server.json
            git commit -m "chore: update server.json version to $NEW_VERSION [skip ci]"
            git push
          fi

      - name: Setup Go
        if: success()
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Setup MCP Publisher
        if: success()
        run: |
          # Clone MCP Registry and build publisher
          git clone https://github.com/modelcontextprotocol/registry.git /tmp/mcp-registry
          cd /tmp/mcp-registry
          
          # Build the publisher CLI
          cd cmd/publisher
          go build -o /tmp/mcp-publisher .
          chmod +x /tmp/mcp-publisher
          
          # Verify the binary exists
          ls -la /tmp/mcp-publisher

      - name: Login to MCP Registry
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACTIONS_ID_TOKEN_REQUEST_URL: ${{ env.ACTIONS_ID_TOKEN_REQUEST_URL }}
          ACTIONS_ID_TOKEN_REQUEST_TOKEN: ${{ env.ACTIONS_ID_TOKEN_REQUEST_TOKEN }}
        run: |
          echo "Attempting to login to MCP Registry with GitHub OIDC..."
          
          # Debug: Show MCP Publisher version
          /tmp/mcp-publisher --version || echo "No version command available"
          
          # Debug: Show available authentication methods
          /tmp/mcp-publisher --help || echo "No help available"
          
          # Try to login using GitHub OIDC
          if /tmp/mcp-publisher login github-oidc; then
            echo "‚úÖ Successfully logged in to MCP Registry"
            echo "MCP_REGISTRY_AUTHENTICATED=true" >> $GITHUB_ENV
            
            # Quick health check - try to query registry
            echo "üîç Checking MCP Registry health..."
            curl -s --connect-timeout 10 --max-time 30 \
              "https://registry.modelcontextprotocol.io/health" \
              && echo "‚úÖ Registry health check passed" \
              || echo "‚ö†Ô∏è Registry health check failed (may affect publishing)"
          else
            echo "‚ùå Failed to login to MCP Registry (may be in preview)"
            echo "MCP_REGISTRY_AUTHENTICATED=false" >> $GITHUB_ENV
          fi

      - name: Publish to MCP Registry
        if: success() && env.MCP_REGISTRY_AUTHENTICATED == 'true'
        run: |
          echo "Publishing server.json to MCP Registry..."
          
          # Navigate to repo root
          cd $GITHUB_WORKSPACE
          
          # Verify server.json exists
          if [ ! -f "server.json" ]; then
            echo "‚ùå server.json not found"
            exit 1
          fi
          
          # Show server.json content for debugging
          echo "üìÑ server.json content:"
          cat server.json
          
          # Validate server.json format
          echo "üîç Validating server.json format..."
          echo "Server name: $(jq -r '.name' server.json)"
          echo "Server version: $(jq -r '.version_detail.version' server.json)"
          echo "Package version: $(jq -r '.packages[0].version' server.json)"
          echo "Repository URL: $(jq -r '.repository.url' server.json)"
          
          # Publish to MCP Registry with retry mechanism
          echo "üöÄ Attempting to publish to MCP Registry..."
          
          MAX_RETRIES=3
          RETRY_COUNT=0
          PUBLISH_SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$PUBLISH_SUCCESS" = false ]; do
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "üì§ Publish attempt $RETRY_COUNT of $MAX_RETRIES..."
            
            if /tmp/mcp-publisher publish; then
              echo "‚úÖ Successfully published to MCP Registry!"
              echo "üéâ Server is now available at: https://registry.modelcontextprotocol.io"
              PUBLISH_SUCCESS=true
            else
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "‚ö†Ô∏è Publish attempt $RETRY_COUNT failed, retrying in 10 seconds..."
                sleep 10
              else
                echo "‚ùå All publish attempts failed"
                echo "‚ö†Ô∏è Failed to publish to MCP Registry (registry may have temporary issues)"
                echo "This is often due to MCP Registry being in preview or having server-side issues"
                echo "The NPM package was successfully published and the workflow continues"
              fi
            fi
          done